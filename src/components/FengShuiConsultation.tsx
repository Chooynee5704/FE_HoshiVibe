import type { CSSProperties } from 'react'
import { useState, useEffect, useRef } from 'react'

const FengShuiConsultation = () => {
  const [hoveredService, setHoveredService] = useState<number | null>(null)
  const [isVisible, setIsVisible] = useState(false)
  const sectionRef = useRef<HTMLElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
        }
      },
      { threshold: 0.1 }
    )

    if (sectionRef.current) {
      observer.observe(sectionRef.current)
    }

    return () => {
      if (sectionRef.current) {
        observer.unobserve(sectionRef.current)
      }
    }
  }, [])

  const sectionStyle: CSSProperties = {
    backgroundColor: '#ffffff',
    padding: '5rem 2rem',
    position: 'relative'
  }

  const container: CSSProperties = {
    maxWidth: '1400px',
    margin: '0 auto'
  }

  const headerStyle: CSSProperties = {
    textAlign: 'center',
    marginBottom: '4rem'
  }

  const titleStyle: CSSProperties = {
    fontSize: '3rem',
    fontWeight: 900,
    color: '#000000',
    letterSpacing: '-0.02em',
    marginBottom: '1rem',
    textTransform: 'uppercase'
  }

  const subtitleStyle: CSSProperties = {
    fontSize: '1.125rem',
    color: '#666666',
    maxWidth: '700px',
    margin: '0 auto',
    lineHeight: '1.8'
  }

  const servicesGrid: CSSProperties = {
    display: 'grid',
    gridTemplateColumns: 'repeat(auto-fit, minmax(320px, 1fr))',
    gap: '2rem',
    marginBottom: '4rem'
  }

  const serviceCard: CSSProperties = {
    background: '#ffffff',
    border: '1px solid #e5e5e5',
    padding: '2.5rem',
    transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)',
    position: 'relative',
    overflow: 'hidden'
  }

  const iconWrapStyle: CSSProperties = {
    width: '80px',
    height: '80px',
    background: '#000000',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: '1.5rem',
    transition: 'all 0.4s ease'
  }

  const serviceTitleStyle: CSSProperties = {
    fontSize: '1.5rem',
    fontWeight: 800,
    color: '#000000',
    marginBottom: '1rem',
    letterSpacing: '0.02em',
    textTransform: 'uppercase'
  }

  const serviceDescStyle: CSSProperties = {
    fontSize: '0.95rem',
    color: '#666666',
    lineHeight: '1.8',
    marginBottom: '1.5rem'
  }

  const featureList: CSSProperties = {
    listStyle: 'none',
    padding: 0,
    margin: 0
  }

  const featureItem: CSSProperties = {
    display: 'flex',
    alignItems: 'flex-start',
    gap: '0.75rem',
    marginBottom: '0.75rem',
    fontSize: '0.9rem',
    color: '#333333'
  }

  const ctaSection: CSSProperties = {
    background: '#000000',
    padding: '4rem 3rem',
    textAlign: 'center',
    position: 'relative'
  }

  const ctaTitleStyle: CSSProperties = {
    fontSize: '2.5rem',
    fontWeight: 900,
    color: '#ffffff',
    marginBottom: '1.5rem',
    letterSpacing: '-0.01em'
  }

  const ctaDescStyle: CSSProperties = {
    fontSize: '1.125rem',
    color: '#cccccc',
    marginBottom: '2.5rem',
    maxWidth: '600px',
    margin: '0 auto 2.5rem'
  }

  const buttonStyle: CSSProperties = {
    background: '#ffffff',
    color: '#000000',
    border: 'none',
    padding: '1rem 3rem',
    fontSize: '1rem',
    fontWeight: 700,
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    letterSpacing: '0.05em',
    textTransform: 'uppercase'
  }

  const services = [
    {
      id: 1,
      icon: '‚òØ',
      title: 'T∆∞ V·∫•n M·ªánh',
      description: 'Ph√¢n t√≠ch ng≈© h√†nh, m·ªánh s·ªë ƒë·ªÉ t√¨m ra ƒë√° phong th·ªßy ph√π h·ª£p nh·∫•t v·ªõi b·∫°n',
      features: [
        'X√°c ƒë·ªãnh ng≈© h√†nh c√° nh√¢n',
        'Ch·ªçn m√†u s·∫Øc ƒë√° h·ª£p m·ªánh',
        'T∆∞ v·∫•n h∆∞·ªõng ƒëeo v√† c√°ch b·∫£o qu·∫£n',
        'Ph√¢n t√≠ch nƒÉng l∆∞·ª£ng ƒë√° ph√π h·ª£p'
      ]
    },
    {
      id: 2,
      icon: 'üîÆ',
      title: 'Ch·ªçn ƒê√° Theo Tu·ªïi',
      description: 'T∆∞ v·∫•n chuy√™n s√¢u v·ªÅ lo·∫°i ƒë√° ph√π h·ª£p v·ªõi nƒÉm sinh v√† tu·ªïi c·ªßa b·∫°n',
      features: [
        'ƒê√° phong th·ªßy theo 12 con gi√°p',
        'M√†u s·∫Øc v√† h√¨nh d·∫°ng h·ª£p tu·ªïi',
        'Tr√°nh ƒë√° xung kh·∫Øc v·ªõi tu·ªïi',
        'TƒÉng c∆∞·ªùng v·∫≠n may theo tu·ªïi'
      ]
    },
    {
      id: 3,
      icon: 'üíé',
      title: 'Thi·∫øt K·∫ø Ri√™ng',
      description: 'Thi·∫øt k·∫ø trang s·ª©c ƒë√° phong th·ªßy ƒë·ªôc ƒë√°o theo y√™u c·∫ßu v√† m·ªánh c·ªßa b·∫°n',
      features: [
        'T∆∞ v·∫•n ph·ªëi h·ª£p nhi·ªÅu lo·∫°i ƒë√°',
        'Thi·∫øt k·∫ø theo phong c√°ch c√° nh√¢n',
        'Ch·ªçn kim lo·∫°i h·ª£p m·ªánh',
        'T·∫°o s·∫£n ph·∫©m ƒë·ªôc nh·∫•t v√¥ nh·ªã'
      ]
    },
    {
      id: 4,
      icon: '‚ú®',
      title: 'K√≠ch Ho·∫°t NƒÉng L∆∞·ª£ng',
      description: 'H∆∞·ªõng d·∫´n c√°ch k√≠ch ho·∫°t v√† tƒÉng c∆∞·ªùng nƒÉng l∆∞·ª£ng ƒë√° phong th·ªßy',
      features: [
        'Nghi th·ª©c k√≠ch ho·∫°t ƒë√° m·ªõi',
        'L√†m s·∫°ch nƒÉng l∆∞·ª£ng ti√™u c·ª±c',
        'S·∫°c nƒÉng l∆∞·ª£ng d∆∞∆°ng ƒë·ªãnh k·ª≥',
        'B·∫£o qu·∫£n ƒë√° ƒë√∫ng c√°ch'
      ]
    }
  ]

  return (
    <section ref={sectionRef} style={sectionStyle}>
      <div style={container}>
        <div className={isVisible ? 'animate-on-scroll animate' : 'animate-on-scroll'} style={headerStyle}>
          <h2 
            className={isVisible ? 'animate-fade-in-up delay-100' : ''}
            style={{
              ...titleStyle,
              opacity: isVisible ? 1 : 0
            }}
          >
            T∆∞ V·∫•n Phong Th·ªßy
          </h2>
          <p 
            className={isVisible ? 'animate-fade-in-up delay-200' : ''}
            style={{
              ...subtitleStyle,
              opacity: isVisible ? 1 : 0
            }}
          >
            Ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• t∆∞ v·∫•n phong th·ªßy chuy√™n s√¢u, gi√∫p b·∫°n ch·ªçn l·ª±a ƒë√° phong th·ªßy ph√π h·ª£p v·ªõi m·ªánh, 
            tu·ªïi v√† m·ª•c ƒë√≠ch s·ª≠ d·ª•ng. M·ªói vi√™n ƒë√° ƒë·ªÅu mang nƒÉng l∆∞·ª£ng ri√™ng bi·ªát, 
            h√£y ƒë·ªÉ ch√∫ng t√¥i gi√∫p b·∫°n t√¨m ra vi√™n ƒë√° ƒë·ªãnh m·ªánh c·ªßa m√¨nh.
          </p>
        </div>

        <div className={`stagger-animation ${isVisible ? 'animate' : ''}`} style={servicesGrid}>
          {services.map((service) => {
            const isHovered = hoveredService === service.id
            return (
              <div
                key={service.id}
                className="enhanced-card"
                style={{
                  ...serviceCard,
                  borderColor: isHovered ? '#000000' : '#e5e5e5',
                  transform: isHovered ? 'translateY(-8px) scale(1.02)' : 'translateY(0) scale(1)',
                  boxShadow: isHovered
                    ? '0 20px 40px rgba(0,0,0,0.12)'
                    : '0 4px 12px rgba(0,0,0,0.05)',
                  transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)'
                }}
                onMouseEnter={() => setHoveredService(service.id)}
                onMouseLeave={() => setHoveredService(null)}
              >
                <div
                  style={{
                    ...iconWrapStyle,
                    background: '#f5f5f5',
                    transform: isHovered ? 'scale(1.05)' : 'scale(1)'
                  }}
                >
                  <span
                    style={{
                      fontSize: '2.5rem'
                    }}
                  >
                    {service.icon}
                  </span>
                </div>

                <h3 style={serviceTitleStyle}>{service.title}</h3>
                <p style={serviceDescStyle}>{service.description}</p>

                <ul style={featureList}>
                  {service.features.map((feature, idx) => (
                    <li key={idx} style={featureItem}>
                      <span style={{ color: '#000000', fontWeight: 700 }}>‚ñ∏</span>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )
          })}
        </div>

        <div className={isVisible ? 'animate-on-scroll animate' : 'animate-on-scroll'} style={ctaSection}>
          <h3 
            className={isVisible ? 'animate-fade-in-up delay-400' : ''}
            style={{
              ...ctaTitleStyle,
              opacity: isVisible ? 1 : 0
            }}
          >
            ƒê·∫∑t L·ªãch T∆∞ V·∫•n Mi·ªÖn Ph√≠
          </h3>
          <p 
            className={isVisible ? 'animate-fade-in-up delay-500' : ''}
            style={{
              ...ctaDescStyle,
              opacity: isVisible ? 1 : 0
            }}
          >
            Nh·∫≠n t∆∞ v·∫•n 1-1 t·ª´ chuy√™n gia phong th·ªßy c·ªßa ch√∫ng t√¥i. 
            Ch√∫ng t√¥i s·∫Ω gi√∫p b·∫°n t√¨m ra vi√™n ƒë√° ho√†n h·∫£o cho ri√™ng m√¨nh.
          </p>
          <button
            className={`btn-primary ${isVisible ? 'animate-scale-in delay-600' : ''}`}
            style={{
              ...buttonStyle,
              opacity: isVisible ? 1 : 0
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.background = '#f5f5f5'
              e.currentTarget.style.transform = 'translateY(-2px) scale(1.05)'
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.background = '#ffffff'
              e.currentTarget.style.transform = 'translateY(0) scale(1)'
            }}
          >
            Li√™n H·ªá Ngay
          </button>
        </div>
      </div>
    </section>
  )
}

export default FengShuiConsultation